// 연산자(Operator)
// --------------------------------------------
// 1. 대입연산자 : 연산자 우변의 값을 좌변의 변수에 저장(할당)
let a = 10;
document.write("a = " + a + "<br>");
document.write(`a = ${a}<br>`);

// 2. 산술연산자(+, -, *, /, %)
// 변수 a 값에 5 를 더한 결과를 다시 변수 a 에 저장
a = a + 5; // 10 + 5 = 15
document.write(`a = ${a}<br>`);

// 복합(확장) 대입연산자를 활용하여 동일한 작업 수행
a += 5; // a = a + 5 와 동일함
document.write(`a = ${a}<br>`);
// -------------------------------------------------
// 변수 a 값에 1을 더한 결과값을 다시 변수 a 에 저장(= 변수 a 값을 1만큼 증가)하는 방법 3가지
a = a + 1; // 가장 기본적인 연산
a += 1; // 복합 대입연산자
// 변수값을 1만큼 변화시킬 때는 증감연산자(증가연산자 ++, 감소연산자 --) 활용하는 것이 편리함
a++; // 또는 ++a
document.write(`a = ${a}<br>`);

// ----------------------------------------
// 증감연산자의 위치에 따른 연산 과정의 차이(다른 연산자와 증감연산자를 복합적으로 사용할 때)
// 1) 증감연산자가 피연산자(Operand)의 좌측에 위치할 경우 선행연산자(전위연산자)로 사용되며
//    다른 연산 수행 전 먼저 해당 피연산자의 값을 1만큼 변화시킨 후 다른 연산에 참여함
//    ex) ++a, --b
// 2) 증감연산자가 피연산자(Operand)의 우측에 위치할 경우 후행연산자(후위연산자)로 사용되며
//    다른 연산을 먼저 수행한 후 해당 피연산자의 값을 1만큼 변화시킴
//    ex) a--, b++
a = 10;
let b = a++ + 5; // 후행연산자
// a++ 는 후행연산자로, 다른 연산에 먼저 피연산자 a(10)를 참여시킨 후 피연산자 값을 증가시킴
// 1) a + 5 를 먼저 수행하여 결과값 15 를 계산한 후
// 2) b = a 연산을 수행하므로, a + 5 결과값(15)을 먼저 b 에 저장(b = 15)
// 3) a++ 를 통해 a 값을 1만큼 증가시킴(a = 10 -> 11)
document.write(`a = ${a}, b = ${b}<br>`); // a = 11, b = 15

a = 10;
let b2 = ++a + 5; // 선행연산자
// 1) ++a 는 선행연산자로, 다른 연산 수행 전 먼저 피연산자 a(10)를 1만큼 증가(10 -> 11)시킨 후
// 2) a + 5 를 수행하여 11 + 5 = 16 이 계산되고
// 3) b = a + 5 를 수행하여 11 + 5 = 16 값을 최종적으로 변수 b2 에 저장(b2 = 16)
document.write(`a = ${a}, b2 = ${b2}<br>`); // a = 11, b = 15

// 그러나 연산 과정을 헷갈리기 쉬우므로 분리해서 작성하자!!!!!!
a++;
let b3 = a + 5;
// => 첫번째 연산(let b = a++ + 5) 과는 다르다! 두번째 연산(let b2 = ++a + 5) 과 동일함
// ==========================================================================
document.write("<hr>");
// 2. 비교연산자 : 두 피연산자의 값에 대한 대소 크기 비교 후 결과값을 true / false 로 표현
document.write(`10 > 5 ? ${10 > 5}<br>`); // 10 이 5 보다 큰가? true
document.write(`10 == 5 ? ${10 == 5}<br>`); // 10 이 5 와 같은가? false
document.write(`10 != 5 ? ${10 != 5}<br>`); // 10 이 5 와 같지 않은가? true

// 자바스크립트에서 숫자데이터와 문자열 형태의 숫자를 대부분의 연산자로 연산 수행 시
// 자동으로 문자열을 정수로 변환하여 두 피연산자의 데이터타입을 일치시킨 후 연산을 수행함
// => 주로, 산술연산(+ 제외)이나 비교연산에서 일어남
document.write(`"10" - 5 ? ${"10" - 5}<br>`); // 문자열 "10" 을 숫자 10 으로 변환 후 10 - 5 = 5 실행됨

document.write(`"10" == 10 ? ${"10" == 10}<br>`); 
// 문자열 "10" 을 숫자 10 으로 변환 후 비교연산 수행하므로 10 == 10 이 true 로 판단됨

// 동등비교연산자를 = 기호 3개(===) 로 사용할 경우
// 실제 데이터를 비교하기 전 먼저 데이터타입을 비교한 후 값을 비교함
// 즉, 데이터타입이 다르거나 값이 다르면 false, 데이터타입과 값이 모두 같으면 true
document.write(`"10" === 10 ? ${"10" === 10}<br>`); 
// 문자열 "10" 과 정수 10은 데이터타입이 다르므로 false 

// 비교연산자를 통한 문자열의 크기 비교
// => 단일 또는 복수개의 문자 비교 시 앞에서부터 차례대로 각각의 문자에 대한 아스키코드값으로 비교
//    (기본 아스키코드값 : "A"(65), "a"(97), "0"(48))
document.write(`"Javascript" > "javascript" ? ${"Javascript" > "javascript"}<br>`); // false
// => 대문자는 소문자보다 아스키코드값이 작으므로 "Javascript" 가 "javascript" 보다 작다. 따라서 false
document.write(`"javascript" > "javaScript" ? ${"javascript" > "javaScript"}<br>`); // true
// => j, a, v, a 순으로 모두 같고, 소문자 s 가 대문자 S 보다 크다. 따라서, true
// ===================================================================================
document.write("<hr>");
// [ 덧셈 기호(+ 연산자)의 변신 ]
document.write(`2 + 2 = ${2 + 2}<br>`); // number타입 + number타입 = number 타입으로 산술 연산 수행(2 + 2 = 4)

// 어느 한쪽이라도 피연산자가 string 이면 + 기호는 연결연산자로 사용됨
document.write(`2 + "2" = ${2 + "2"}<br>`); 
// => number + string = string 타입으로 결합되므로 2 + "2" = "22"


document.write(`2 + 2 + "2" = ${2 + 2 + "2"}<br>`); 
// => 연산자가 동일할 때 좌측에서 우측으로 순서대로 진행하므로
//    먼저 2 + 2 = 4 를 수행한 후 4 + "2" = "42" 가 된다!
document.write(`"2" + 2 + 2 = ${"2" + 2 + 2}<br>`); 
// => 먼저 "2" + 2 를 수행한 후 "22" + 2 = "222" 가 된다!
// ==============================================================================
// 3. 논리연산자 : 피연산자가 논리적인 조건에 부합되는지 검사
// => 논리연산에 사용되는 피연산자는 무조건 boolean 타입(true/false)만 사용해야함
// => 주로, 비교연산자와 결합하여 다른 연산에 대한 논리적인 판별 수행하는데 활용 
// 1) AND 연산자(&&) - 두 피연산자가 모두 true 일 경우 결과값 true, 하나라도 false 면 결과값 false
// 2) OR 연산자(||) - 두 피연산자가 모두 false 일 경우 결과값 false, 하나라도 true 면 결과값 true
// 3) NOT 연산자(!) - 단항연산자. 피연산자의 현재 boolean 값 반전(토글 = toggle). true -> false, false -> true
document.write(`false && false = ${false && false}<br>`); // false
document.write(`false && true = ${false && true}<br>`); // false
document.write(`true && false = ${true && false}<br>`); // false 
document.write(`true && true = ${true && true}<br>`); // true

document.write(`false || false = ${false || false}<br>`); // false 
document.write(`false || true = ${false || true}<br>`); // true 
document.write(`true || false = ${true || false}<br>`); // true 
document.write(`true || true = ${true || true}<br>`); // true

// NOT 연산자는 단항연산자이며, 피연산자의 앞(좌측)에 표기
document.write(`!false = ${!false}<br>`); // false 가 아닌 값(false 의 반대) = true
document.write(`!true = ${!true}<br>`); // true 가 아닌 값(true 의 반대) = false

// --------------------------------------------------------
// 논리연산자의 실제 활용 예시
// 1. 나이(age)가 10대인지 판별
//    => 10대란? 나이(age)가 10보다 크거나 같고(이상이고), 나이(age)가 19보다 작거나 같음
let age = 3;
let isTeenager = (age >= 10) && (age <= 19);
document.write(`${age} 세는 10대인가? ${isTeenager}<br>`);

// 2. 놀이동산 무료 입장 조건 판별
//    => 무료 입장 조건 : 나이(age)가 5보다 작거나, 나이(age)가 65보다 크거나 같음
let isFree = (age < 5) || (age >= 65);
document.write(`${age} 세는 무료입장 대상인가? ${isFree}<br>`);

 




















