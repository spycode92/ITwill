/*
[ 전달인자가 있는 함수 ]
- 외부에서 함수 호출 시 함수에 전달할 데이터를 전달인자(Argument)라고 함
- 이 때, 전달인자를 전달받아 함수에서 사용하기 위해서는 매개변수(Parameter)가 필요함
  => 자바스크립트에서 매개변수는 변수명만 지정하면 된다(let, var 등 선언 불필요)
- 외부에서 전달하는 데이터(전달인자)의 갯수와 동일한 갯수의 매개변수 선언 필수
  (전달인자의 갯수 제한은 없음)
- 외부에서 전달받은 데이터의 타입에 따라 변수 data 의 타입이 결정
  => 만약, 전달받은 데이터가 없을 경우 undefined 값이 저장됨(= 변수 선언 후 초기화하지 않을때와 동일)
- undefined 값이 아닌 특정 데이터를 기본값으로 지정하는 방법
  => 함수 선언부에 "함수명(매개변수명 = 기본값)" 의 형태로 지정하거나  
     함수 내에서 if문을 통해 undefined 값일 경우 기본값을 저장하는 코드를 추가
  ex) function a(data = 0) {} // data 매개변수의 기본값이 0으로 설정됨
  ex2) function a(data) {
	  		if(data == undefined) {
	  			data = 0;
	  		}
       }
*/

// 1. 문자열 1개를 전달받아 해당 문자열을 출력하는 printMessage() 함수 정의
//    ex) "Hello, World!" 전달 시 해당 문자열을 그대로 브라우저에 출력
//    => 전달인자가 있으므로 함수 정의 시 소괄호() 내에 전달인자를 저장할 변수(매개변수) 기술
//       이 때, 자바와 달리 데이터타입 없이 변수명만 기술
// 외부로부터 전달되는 1개의 전달인자(데이터)를 저장하기 위해 매개변수(파라미터) 1개 지정 
function printMessage(msg) {
//	let msg = "Hello, World!"; // 이 코드와 동일한 형태로 매개변수가 값을 담고 있게 됨
	// 파라미터에 저장된 값은 함수 내에서 변수명을 사용하여 자유롭게 접근 가능함
	document.write(`전달받은 전달인자(데이터) : ${msg}<br>`);	
}
// ------------------------------------------------------------------------------
// 2. 정수 1개(count)를 전달받아 count 값만큼 반복문을 수행하며 
//    "Hello, World!" 문자열을 출력하는 함수 printHello() 정의
function printHello(count) { // 외부에서 전달한 반복 횟수(5)가 매개변수 count 에 저장됨
	// for 문을 사용하여 1 ~ count 까지 1씩 증가하면서 "Hello, World!" 문자열 출력 반복
	for(let i = 1; i <= count; i++) {
		document.write(`${i} : Hello, World!<br>`);
	}
}
// ------------------------------------------------------------------------------
// 3. 정수 1개(x)를 전달받아 1 ~ x 까지의 합계를 계산하여 출력하는 sum() 함수 정의
function sum(x) {
	let total = 0;
	
	for(let i = 1; i <= x; i++) {
		total += i; // 합계 누적
	}
	
	document.write(`1 ~ ${x} 까지의 합 = ${total}<br>`);
}
// ------------------------------------------------------------------------------
// 4. 정수 1개(dan)를 전달받아 dan 에 해당하는 구구단을 출력하는 gugudan() 함수 정의
//    ex) 2 전달 시 구구단 2단 출력, 9 전달 시 구구단 9단 출력
function gugudan(dan) {
	document.write(` < ${dan} 단 ><br>`);
	for(let i = 1; i <= 9; i++) {
		document.write(`${dan} * ${i} = ${dan * i}<br>`);
	}
}
// ------------------------------------------------------------------------------
// 5. 정수 2개(num1, num2) 전달받아 두 수의 합계를 계산하여 출력하는 sum2() 함수 정의
//    ex) sum2(10, 20) 형태로 호출
//function sum2(num1, num2) {
//	document.write(`${num1} + ${num2} = ${num1 + num2}<br>`);
//}
function sum2(num1 = 0, num2 = 0) { // 파라미터에 값이 전달되지 않으면 0 을 기본값으로 사용
	document.write(`${num1} + ${num2} = ${num1 + num2}<br>`);
}

// ------------------------------------------------------------------------------
// 6. 문자열 1개와 정수 1개를 전달받아 문자열을 정수 x번만큼 출력하는 printMessage2() 함수 정의
// printMessage2("Hello, World!", 5)
function printMessage2(text, cnt) {
	for(let i = 1; i <= cnt; i++) {
		document.write(`${i} : ${text}<br>`);
	}
}
// ------------------------------------------------------------------------------
// 7. 아이디(id)와 패스워드(passwd)를 전달받아 일치 여부를 판별하여 출력하는 login() 함수 정의
//    => 아이디가 "admin" 이고, 패스워드가 "1234" 일 경우 "로그인 성공!" 출력하고
//       아니면, "로그인 실패!" 출력
function login(id, passwd) {
	if(id == "admin" && passwd == "1234") {
		document.write(`로그인 성공!<br>`);
	} else {
		document.write(`로그인 실패!<br>`);
	}

//	if(id == "admin") { // 아이디 일치
//		// 아이디가 일치할 경우에만 패스워드를 비교
//		if(passwd == "1234") { // 패스워드 일치
//			document.write(`로그인 성공!<br>`);
//		} else { // 패스워드 불일치
//			document.write(`로그인 실패(패스워드 틀림)!<br>`);
//		}
//	} else { // 아이디 없음
//		document.write(`로그인 실패(존재하지 않는 아이디)!<br>`);
//	}

	// 삼항연산자 사용 시
	// 조건식 ? true 일 때 값 : false 일 때 값
//	let result = (id == "admin" && passwd == "1234") ? "로그인 성공!" : "로그인 실패!";
//	document.write(`${result}<br>`);
}
















