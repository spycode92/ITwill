<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%! // 선언문 시작
/*
이 영역은 JSP 선언문(Declaration)으로 JSP 파일 전체(= 전역)에서 접근 가능한
멤버변수(필드) 및 메서드를 선언하는 영역입니다.
=> 자바 클래스 내에서 멤버레벨(클래스 내부, 메서드 외부) 위치하고 동일한 특성이 부여됨
=> 실제로 서버상에서 JSP 파일을 컴파일하면 *.java 파일과 *.class 파일이 생성되는데
   이 클래스 내의 멤버레벨에 현재 영역 내의 코드들이 위치한다!
*/
// 1. 인스턴스 멤버 변수(= 필드) 선언
String str1 = "멤버변수입니다.";

// 2. 메서드 정의 => 접근제한자 리턴타입 메서드명([파라미터...]) {}
// 2-1) 리턴값이 없는 method1() 메서드 정의(접근제한자 = public)
public void method1() {
	System.out.println("선언문 내에서 정의한 method1() 메서드");
}

// 2-2) 리턴값(String 타입)이 있는 method2() 메서드 정의
String method2() {
	return "method2() 의 리턴값";
}
%> <%-- 선언문 끝 --%>

<%-- 선언문은 중복 선언 가능 --%>
<%! private String str2 = "두번째 멤버변수"; %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>test2.jsp</h1>
	
	<%--
	[ 표현식 <%= %> ]
	- 선언문 또는 스크립틀릿 내에서 선언된 변수에 접근하여 값을 "출력"하거나
	  메서드 호출 후 리턴되는 값을 전달받아 "출력"하거나
	  연산에 대한 결과값을 "출력"하는 등 "데이터 출력" 용도로 사용
	- 자바의 System.out.print() 메서드와 동일한 문법 구조 사용(반드시 출력 데이터를 포함해야함)
	  => 단, System.out.print() 메서드는 이클립스 콘솔에 출력되지만,
	     표현식은 웹페이지(브라우저) 내에 출력하므로 JSP 의 out.print() 메서드와 동일함
	     (자바스크립트의 document.write() 같은 역할)
	--%>
	<h3>멤버변수 str1 = <%=str1 %></h3>
	<%--
	위의 <%=str1 %> 부분은 컨테이너(= 톰캣)에서 자바 코드로 변환(파싱)된 후 실행되어
	실행 결과값이 클라이언트측으로 전달된다!
	따라서, 클라이언트측으로 전송되는 응답 형태가 적용된 결과는 다음과 같다.
	<h3>멤버변수 str1 = 멤버변수입니다.</h3>
	--%>
	
	<h3>리턴값이 있는 method2() 리턴값 : <%=method2() %></h3>
	<%--
	톰캣에서 자바 코드로 변환되면 method2() 메서드를 호출하고 리턴값을 전달받아
	HTML 코드 응답 시 리턴값을 결합하여 응답데이터로 전송함. 따라서, 응답 결과는 다음과 같다.
	<h3>리턴값이 있는 method2() 리턴값 : method2() 의 리턴값</h3>
	--%>
	
	<%-- 주의! 리턴타입이 void 인 메서드 호출 시 컴파일 에러는 발생하지 않지만 실행 시 에러 발생 --%>
	<!-- HTTP 500 에러 발생 => 리턴값이 없는 메서드를 출력문 내에서 호출하기 때문 -->	
<%-- 	<h3>리턴값이 있는 method2() 리턴값 : <%=method1() %></h3> --%>


	<%--
	[ 스크립틀릿(Scriptlet) <% %> ]
	- 자바의 기본적인 문장들을 그대로 표현 가능한 블럭
	- 스크립틀릿 내부는 자바의 메서드 내부와 동일한 위치로 취급됨
	  (실제로 컴파일된 클래스의 메서드 내에 해당 코드들이 위치함)
	  => 메서드 내에서 수행 가능한 작업들만 코드로 기술 가능
	     (로컬 변수 선언, if 문 등의 문장 사용, 인스턴스 생성 등...)
	  => 스크립틀릿 내에서 선언된 변수는 로컬 변수로 취급되며 접근제한자 지정이 불가능하고,
	     메서드를 정의할 수 없다! (= 메서드 내에서 메서드 정의 불가)
	--%>
	
	<%-- 스크립틀릿 내부에서 선언된 로컬변수는 선언된 위치보다 앞(위)쪽에서 접근 불가! --%>
<%-- 	<h3>로컬변수 str3 = <%=str3 %></h3> --%>
	<%
	// 이 곳은 스크립틀릿 내부로, 변수 선언 가능하며 로컬 변수로 취급됨
	String str3 = "로컬변수입니다."; // 접근제한자 설정 불가!
	
	// 다른 메서드 호출하거나 객체 생성 등의 작업도 가능
	method1(); // 출력문 내에서 사용 불가능한 리턴타입 void 인 메서드도 호출 가능
// 	System.out.println(method1()); // 표현식과 동일하게 호출 불가!

	// for문으로 1 ~ 3 까지 1씩 증가하면서 str3 값 3번 반복 출력
	for(int i = 1; i <= 3; i++) {
		System.out.println(str3);
	}

	// 메서드 내에서는 다른 메서드 정의 불가능
	// 따라서, 스크립틀릿 내에서도 메서드 정의 불가능
// 	public void method3() {}

	// 자바에서 콘솔에 메세지를 출력하려면 System.out.println() 또는 print() 메서드 등 사용
	System.out.println("이 메세지는 콘솔창에 출력됨");
	System.out.println("이 메세지는 콘솔창에 출력됨");
	
	System.out.print("이 메세지는 콘솔창에 출력됨");
	System.out.print("이 메세지는 콘솔창에 출력됨");
	
	// 스크립틀릿 내에서 웹브라우저(화면)에 데이터를 출력하려면
	// JSP 에서 제공하는 내장객체인 out 객체의 print() 또는 println() 메서드 사용
	// => 이 때, out.print() 메서드는 JSP 의 표현식과 동일한 역할을 수행
	out.println("이 메세지는 콘솔창에 출력됨");
	out.println("이 메세지는 콘솔창에 출력됨");
	// => println() 메서드 호출 시 출력 후에 줄바꿈을 수행하지만
	//    브라우저 내에서 줄바꿈은 공백으로 치환된다!
	
	// print() 메서드는 출력 후 줄바꿈을 수행하지 않으므로 공백도 없음
	// 따라서, 줄바꿈을 수행하려면 <br> 태그를 사용하여 직접 줄바꿈을 수행해야한다!
	out.print("이 메세지는 콘솔창에 출력됨");
	out.print("이 메세지는 콘솔창에 출력됨<br>");
	out.print("이 메세지는 콘솔창에 출력됨");
	%>
	
	<%-- 스크립틀릿 외부라도 실제 클래스 내에서는 선언문을 제외하면 --%>
	<%-- 하나의 메서드(_jspService()) 내에 위치하기 때문에 로컬변수는 스크립틀릿 외부에서도 접근 가능 --%>
	<h3>로컬변수 str3 = <%=str3 %></h3>
	
	<%-- 멤버변수는 선언 위치와 관계없이 클래스 내에서 어디서든 접근 가능 --%>
	<h3>멤버변수 str4 = <%=str4 %></h3>
	
	<%-- 멤버변수 str4 선언 및 "멤버변수 str4" 문자열 저장 --%>
	<%! String str4 = "멤버변수 str4"; %>
	
	<h3>멤버변수 str4 = <%=str4 %></h3>
	
</body>
</html>
















